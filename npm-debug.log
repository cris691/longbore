0 info it worked if it ends with ok
1 verbose cli [ '/home/messagecris/.nvm/versions/node/v6.10.2/bin/node',
1 verbose cli   '/home/messagecris/.nvm/versions/node/v6.10.2/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/messagecris/old/dosy',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/messagecris/.npm/dosy/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
10 info lifecycle dosy@1.0.0~prepublish: dosy@1.0.0
11 silly lifecycle dosy@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/messagecris/.npm/dosy/1.0.0/package.tgz',
12 verbose tar pack   '/home/messagecris/old/dosy' ]
13 verbose tarball /home/messagecris/.npm/dosy/1.0.0/package.tgz
14 verbose folder /home/messagecris/old/dosy
15 verbose addLocalTarball adding from inside cache /home/messagecris/.npm/dosy/1.0.0/package.tgz
16 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd dosy@1.0.0
18 verbose afterAdd /home/messagecris/.npm/dosy/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /home/messagecris/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/messagecris/.npm/dosy/1.0.0/package/package.json written
21 silly publish { name: 'dosy',
21 silly publish   version: '1.0.0',
21 silly publish   description: '8-bit random number generators that pass PracRand',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/dosaygo-coder-0/dosy.git' },
21 silly publish   keywords:
21 silly publish    [ 'prng',
21 silly publish      'rng',
21 silly publish      'csprng',
21 silly publish      'pracrand',
21 silly publish      'random',
21 silly publish      'number',
21 silly publish      'generator' ],
21 silly publish   author:
21 silly publish    { name: 'Kris',
21 silly publish      email: 'dontmailme@gmail.com',
21 silly publish      url: 'https://2yago.com' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/dosaygo-coder-0/dosy/issues' },
21 silly publish   homepage: 'https://github.com/dosaygo-coder-0/dosy#readme',
21 silly publish   readme: '# DOSY\n\nMemorizable, simple 8-bit random number generators that pass PractRand.\n\nThe round function is only a few lines long.\n\n```js\n  function round() {\n    let j = 44;\n    let sum = 1;\n    for( let i = 0; i < 45; i++ ) {\n      s[j] ^= (s[i] >> 1) ^ (sum << 1);\n      s[i] += s[j] + 1;\n      j = ( j + 1 ) % 45;\n      sum += s[i];\n    }\n    return sum & 255;\n  }\n```\n\nThat\'s it.\n\nDOSY defines a family of truly superb, super-simple, variable-state PRNGs ( pseudorandom number generators ) / CSPRNGs ( cryptogrpahically secure pseudorandom number generators ), that are both extraordinarily simple, and pass PractRand.\n\n# Install & Using\n\nIf you\'re using node you can just `npm install dosy` and \n\n```js\nconst dosy = require(\'dosy\');\nconst rng = dosy.d451();\n\nconsole.log( rng.next().value );\n```\n\nThe RNGs are wrapped as [iterators](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Iterators_and_Generators), so you can easily do:\n\n```js\nlet count = 0;\nrng.length = 100;  // note the special length property puts a limit on a single iteration\nfor( const rvar of rng ) {\n  console.log( rvar );\n}\n```\n\nTo run it in the browser, just download the `index.js` file, save it as `dosy.js`, host it somewhere and load it as a script\n\n```html\n  <script src=/dosy.js></script>\n  <script>\n    const rng = dosy.d451();\n  </script>\n```\n\n# Use Cases\n\nDosy is not super fast ( it iterates its entire state once for each output byte ), and it was designed to mostly generate short keystreams to encrypt short messages, under 4K in length. \n\n# Test Results\n\nDosy was tested using [PractRand](http://pracrand.sourceforge.net/) which is a [top-notch bias finder for RNGs](https://stackoverflow.com/a/27160492/7652736). Despite being so simple to implement, both D451 and D453 passed PractRand ( at 16 MB, 32 MB and 64 MB, no other sequence lengths were generated ). So far the following values are tested:\n\n```js\n{\n  d31: "fails", // 24 bit \n  d41: "passes", // 32 bit \n  d51: "passes", // 40 bit \n  d81: "passes", // 64 bit\n  d451: "passes", // 360 bit\n  d452: "passes",\n  d453: "passes",\n  d454: "passes",\n  d455: "passes"\n}\n```\n\n# Naming\n\nThe DOSY structure defines a family of generators specified by their state length ( in bytes ) and a bit shift ( in bits ). Each algorithm is named like \n\n`D451 - 45 bytes of state, 1 bit of shift`\n\nor, more generally like, `DXXY`.\n\nWhere `XX` ( or `XXX` or `XXXX` and so on, is the state length ) and `Y` is the bit shift. \n\n# Customization\n\nYou can set your own parameters:\n\n```js\n  const rng = dosy.custom( 123, 2 );\n```\n\n# Iteration\n\nThe RNGs created by dosy respect the normal JavaScript iteration protocol. But they also can be run by simple calling the `round()` function on the RNG object as well.\n\n```js\nrng.next().value; // OK\nrng[Symbol.iterator]().next().value; // OK\nrng.round(); // OK\n```\n\nAnd these RNGs also have an extension to the iterator protocol. If you set their `.length` property you can control the length of the iteration to be whatever you like. Without setting length as a number, the iteration is infinite.\n\n```js\nrng.length = 10;\nfor( const rvar of rng ) console.log( rvar ); // 10 values\n```\n\n# Key Scheduling\n\nYou can access the interal state of the generator ( after the first value has been generated ). You can do whatever you like to this state. The state is a [Typed Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) so standard Typed Array APIs apply. \n\nYou can implement your own key scheduling algorithm to include a key to seed the generator, like I did. I used a "sponge" construction, with the first 5 bytes set to absorb the key, by successive rounds, and the last 40 bytes set to the "spare capacity". This key scheduling algorithm worked well, and it\'s not the only way you can seed this family of generators.\n\n# Links\n\n- [dosy on npm](https://www.npmjs.com/package/dosy)\n\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '42b58d42e754281762be11e489e64321ee8cdf1e',
21 silly publish   _id: 'dosy@1.0.0',
21 silly publish   _shasum: 'b491b4dc3f9180f001a97d09d408cec8a4cb07ab',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name dosy
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'dosy',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'dosy',
26 silly mapToRegistry   name: 'dosy',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/dosy
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /home/messagecris/.npm/dosy/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/dosy
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 4:05:08 PM
33 verbose request using bearer token for auth
34 verbose request id 37454c38cafb3e45
35 http request PUT https://registry.npmjs.org/dosy
36 http 403 https://registry.npmjs.org/dosy
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Wed, 07 Jun 2017 08:05:10 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-hkg6826-HKG',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1496822709.306294,VS0,VE871',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /home/messagecris/.npm/registry.npmjs.org/dosy on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : dosy
40 verbose stack     at makeError (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/home/messagecris/.nvm/versions/node/v6.10.2/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid dosy
43 verbose cwd /home/messagecris/old/dosy
44 error Linux 3.16.0-4-amd64
45 error argv "/home/messagecris/.nvm/versions/node/v6.10.2/bin/node" "/home/messagecris/.nvm/versions/node/v6.10.2/bin/npm" "publish"
46 error node v6.10.2
47 error npm  v3.10.10
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : dosy
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
